Index: bl/dress_a_person/find_pose.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import cv2\r\nimport numpy as np\r\nimport mediapipe as mp\r\n\r\n\r\nclass ClothesFitting:\r\n    def __init__(self, person_image_path, clothes_image_path):\r\n        \"\"\"\r\n        Инициализация класса.\r\n        :param person_image_path: Путь к изображению человека.\r\n        :param clothes_image_path: Путь к изображению одежды.\r\n        \"\"\"\r\n        # Загрузка изображений\r\n        self.person_image = cv2.imread(person_image_path)\r\n        self.clothes_image = cv2.imread(clothes_image_path, cv2.IMREAD_UNCHANGED)\r\n\r\n        # Проверка загрузки изображений\r\n        if self.person_image is None:\r\n            raise ValueError(f\"Не удалось загрузить изображение человека по пути: {person_image_path}\")\r\n        if self.clothes_image is None:\r\n            raise ValueError(f\"Не удалось загрузить изображение одежды по пути: {clothes_image_path}\")\r\n\r\n        # Инициализация MediaPipe Pose\r\n        self.mp_pose = mp.solutions.pose\r\n        self.pose = self.mp_pose.Pose(static_image_mode=True)\r\n\r\n        # Поле для хранения результата\r\n        self.annotated_image = None\r\n\r\n    def detect_pose(self):\r\n        \"\"\"\r\n        Обнаружение позы человека на изображении.\r\n        :return: Ключевые точки позы (landmarks).\r\n        \"\"\"\r\n        # Преобразование изображения в RGB\r\n        image_rgb = cv2.cvtColor(self.person_image, cv2.COLOR_BGR2RGB)\r\n\r\n        # Обработка изображения с помощью MediaPipe Pose\r\n        results = self.pose.process(image_rgb)\r\n\r\n        if results.pose_landmarks:\r\n            return results.pose_landmarks.landmark\r\n        else:\r\n            raise ValueError(\"Поза не обнаружена. Убедитесь, что на изображении видно тело человека.\")\r\n\r\n    def calculate_clothes_size(self, landmarks):\r\n        \"\"\"\r\n        Расчет размеров одежды на основе ключевых точек.\r\n        :param landmarks: Ключевые точки позы.\r\n        :return: Ширина и высота одежды, начальные координаты.\r\n        \"\"\"\r\n        # Координаты плеч и бедер\r\n        left_shoulder = landmarks[self.mp_pose.PoseLandmark.LEFT_SHOULDER]\r\n        right_shoulder = landmarks[self.mp_pose.PoseLandmark.RIGHT_SHOULDER]\r\n        left_hip = landmarks[self.mp_pose.PoseLandmark.LEFT_HIP]\r\n\r\n        # Преобразование нормализованных координат в пиксели\r\n        height, width, _ = self.person_image.shape\r\n        left_shoulder_x = int(left_shoulder.x * width)\r\n        left_shoulder_y = int(left_shoulder.y * height)\r\n        right_shoulder_x = int(right_shoulder.x * width)\r\n        left_hip_y = int(left_hip.y * height)\r\n\r\n        # Расчет размеров одежды\r\n        clothes_width = abs(right_shoulder_x - left_shoulder_x) * 21 / 10  # Увеличение ширины в 2 раза\r\n        clothes_height = abs(left_hip_y - left_shoulder_y) * 17 / 10  # Увеличение высоты в 2 раза\r\n\r\n        # Начальные координаты для наложения\r\n        start_x = min(left_shoulder_x, right_shoulder_x) - int(clothes_width * 0.28)  # Смещение для центрирования\r\n        start_y = left_shoulder_y - int(clothes_height * 0.26)  # Смещение для центрирования\r\n\r\n        return clothes_width, clothes_height, start_x, start_y\r\n\r\n    def resize_clothes(self, clothes_width, clothes_height):\r\n        \"\"\"\r\n        Масштабирование изображения одежды.\r\n        :param clothes_width: Ширина одежды.\r\n        :param clothes_height: Высота одежды.\r\n        :return: Масштабированное изображение одежды.\r\n        \"\"\"\r\n        if clothes_width > 0 and clothes_height > 0:\r\n            return cv2.resize(self.clothes_image, (int(clothes_width), int(clothes_height)))\r\n        else:\r\n            raise ValueError(\"Некорректные размеры одежды.\")\r\n\r\n    def overlay_clothes(self, clothes_resized, start_x, start_y):\r\n        \"\"\"\r\n        Наложение одежды на изображение человека.\r\n        :param clothes_resized: Масштабированное изображение одежды.\r\n        :param start_x: Начальная координата X для наложения.\r\n        :param start_y: Начальная координата Y для наложения.\r\n        \"\"\"\r\n        # Создание копии изображения для наложения\r\n        self.annotated_image = self.person_image.copy()\r\n\r\n        # Наложение одежды\r\n        for c in range(3):  # RGB-каналы\r\n            self.annotated_image[start_y:start_y + clothes_resized.shape[0],\r\n            start_x:start_x + clothes_resized.shape[1], c] = \\\r\n                clothes_resized[:, :, c] * (clothes_resized[:, :, 3] / 255.0) + \\\r\n                self.annotated_image[start_y:start_y + clothes_resized.shape[0],\r\n                start_x:start_x + clothes_resized.shape[1], c] * (1.0 - clothes_resized[:, :, 3] / 255.0)\r\n\r\n    def save_result(self, output_path):\r\n        \"\"\"\r\n        Сохранение результата.\r\n        :param output_path: Путь для сохранения результата.\r\n        \"\"\"\r\n        if self.annotated_image is not None:\r\n            cv2.imwrite(output_path, self.annotated_image)\r\n        else:\r\n            raise ValueError(\"Результат не найден. Сначала выполните наложение одежды.\")\r\n\r\n    def show_result(self):\r\n        \"\"\"\r\n        Отображение результата.\r\n        \"\"\"\r\n        if self.annotated_image is not None:\r\n            cv2.imshow('Result', self.annotated_image)\r\n            cv2.waitKey(0)\r\n            cv2.destroyAllWindows()\r\n        else:\r\n            raise ValueError(\"Результат не найден. Сначала выполните наложение одежды.\")\r\n\r\n\r\n# Пример использования\r\nif __name__ == \"__main__\":\r\n    try:\r\n        # Инициализация класса\r\n        clothes_fitting = ClothesFitting('person3.png', 'tshirt.png')\r\n\r\n        # Обнаружение позы\r\n        landmarks = clothes_fitting.detect_pose()\r\n\r\n        # Расчет размеров одежды\r\n        clothes_width, clothes_height, start_x, start_y = clothes_fitting.calculate_clothes_size(landmarks)\r\n\r\n        # Масштабирование одежды\r\n        clothes_resized = clothes_fitting.resize_clothes(clothes_width, clothes_height)\r\n\r\n        # Наложение одежды\r\n        clothes_fitting.overlay_clothes(clothes_resized, start_x, start_y)\r\n\r\n        # Сохранение результата\r\n        clothes_fitting.save_result('output.png')\r\n\r\n        # Отображение результата\r\n        clothes_fitting.show_result()\r\n\r\n    except Exception as e:\r\n        print(f\"Произошла ошибка: {e}\")\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/bl/dress_a_person/find_pose.py b/bl/dress_a_person/find_pose.py
--- a/bl/dress_a_person/find_pose.py	(revision 1619256cdc264b7be4ce559765b126e40e8d56d5)
+++ b/bl/dress_a_person/find_pose.py	(date 1741609416141)
@@ -123,7 +123,7 @@
             raise ValueError("Результат не найден. Сначала выполните наложение одежды.")
 
 
-# Пример использования
+# Тест работоспособности
 if __name__ == "__main__":
     try:
         # Инициализация класса
