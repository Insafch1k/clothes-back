Index: bl/dress_a_person/find_pose.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import cv2\r\nimport mediapipe as mp\r\n\r\n# Инициализация MediaPipe Pose\r\nmp_pose = mp.solutions.pose\r\npose = mp_pose.Pose(static_image_mode=True)\r\n\r\n# Загрузка изображения\r\nimage_path = 'person.jpg'  # Убедитесь, что путь правильный\r\nimage = cv2.imread(image_path)\r\n\r\n# Проверка, загружено ли изображение\r\nif image is None:\r\n    print(f\"Ошибка: Не удалось загрузить изображение по пути: {image_path}\")\r\nelse:\r\n    # Преобразование изображения в RGB\r\n    image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\r\n\r\n    # Обработка изображения с помощью MediaPipe Pose\r\n    results = pose.process(image_rgb)\r\n\r\n    # Проверка результатов\r\n    if results.pose_landmarks:\r\n        # Копия изображения для рисования\r\n        annotated_image = image.copy()\r\n\r\n        # Инициализация утилит для рисования\r\n        mp_drawing = mp.solutions.drawing_utils\r\n\r\n        # Рисование ключевых точек и соединений\r\n        mp_drawing.draw_landmarks(\r\n            annotated_image,\r\n            results.pose_landmarks,\r\n            mp_pose.POSE_CONNECTIONS,\r\n            landmark_drawing_spec=mp_drawing.DrawingSpec(color=(0, 255, 0), thickness=2, circle_radius=2),  # Зеленый цвет для точек\r\n            connection_drawing_spec=mp_drawing.DrawingSpec(color=(0, 0, 255), thickness=2)  # Красный цвет для линий\r\n        )\r\n\r\n        # Сохранение результата\r\n        cv2.imwrite('annotated_image.jpg', annotated_image)\r\n\r\n        # Показ результата\r\n        cv2.imshow('Annotated Image', annotated_image)\r\n        cv2.waitKey(0)\r\n        cv2.destroyAllWindows()\r\n    else:\r\n        print(\"Поза не обнаружена. Убедитесь, что на изображении видно тело человека.\")
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/bl/dress_a_person/find_pose.py b/bl/dress_a_person/find_pose.py
--- a/bl/dress_a_person/find_pose.py	(revision b857b80a1ab5e5bd64d8adaf51f43fb9c0872c46)
+++ b/bl/dress_a_person/find_pose.py	(date 1741527400562)
@@ -1,12 +1,13 @@
 import cv2
+import numpy as np
 import mediapipe as mp
 
 # Инициализация MediaPipe Pose
 mp_pose = mp.solutions.pose
 pose = mp_pose.Pose(static_image_mode=True)
 
-# Загрузка изображения
-image_path = 'person.jpg'  # Убедитесь, что путь правильный
+# Загрузка изображения человека
+image_path = 'person.jpg'
 image = cv2.imread(image_path)
 
 # Проверка, загружено ли изображение
@@ -21,27 +22,53 @@
 
     # Проверка результатов
     if results.pose_landmarks:
-        # Копия изображения для рисования
-        annotated_image = image.copy()
+        # Получение координат ключевых точек
+        landmarks = results.pose_landmarks.landmark
+
+        # Координаты плеч и бедер
+        left_shoulder = landmarks[mp_pose.PoseLandmark.LEFT_SHOULDER]
+        right_shoulder = landmarks[mp_pose.PoseLandmark.RIGHT_SHOULDER]
+        left_hip = landmarks[mp_pose.PoseLandmark.LEFT_HIP]
 
-        # Инициализация утилит для рисования
-        mp_drawing = mp.solutions.drawing_utils
+        # Преобразование нормализованных координат в пиксели
+        height, width, _ = image.shape
+        left_shoulder_x = int(left_shoulder.x * width)
+        left_shoulder_y = int(left_shoulder.y * height)
+        right_shoulder_x = int(right_shoulder.x * width)
+        right_shoulder_y = int(right_shoulder.y * height)
+        left_hip_x = int(left_hip.x * width)
+        left_hip_y = int(left_hip.y * height)
 
-        # Рисование ключевых точек и соединений
-        mp_drawing.draw_landmarks(
-            annotated_image,
-            results.pose_landmarks,
-            mp_pose.POSE_CONNECTIONS,
-            landmark_drawing_spec=mp_drawing.DrawingSpec(color=(0, 255, 0), thickness=2, circle_radius=2),  # Зеленый цвет для точек
-            connection_drawing_spec=mp_drawing.DrawingSpec(color=(0, 0, 255), thickness=2)  # Красный цвет для линий
-        )
+        # Определение начальной точки и размеров одежды
+        start_x = min(left_shoulder_x, right_shoulder_x)  # Минимальная координата X
+        clothes_width = abs(right_shoulder_x - left_shoulder_x) * 2  # Увеличение ширины в 2 раза
+        clothes_height = abs(left_hip_y - left_shoulder_y) * 2  # Увеличение высоты в 2 раза
+
+        # Загрузка изображения одежды
+        clothes = cv2.imread('tshirt.png', cv2.IMREAD_UNCHANGED)
+        if clothes is None:
+            print("Ошибка: Не удалось загрузить изображение одежды. Проверьте путь к файлу.")
+        else:
+            # Масштабирование одежды
+            if clothes_width > 0 and clothes_height > 0:
+                clothes_resized = cv2.resize(clothes, (int(clothes_width), int(clothes_height)))
+
+                # Наложение одежды
+                for c in range(3):  # RGB-каналы
+                    image[left_shoulder_y:left_shoulder_y + clothes_resized.shape[0],
+                          start_x:start_x + clothes_resized.shape[1], c] = \
+                        clothes_resized[:, :, c] * (clothes_resized[:, :, 3] / 255.0) + \
+                        image[left_shoulder_y:left_shoulder_y + clothes_resized.shape[0],
+                              start_x:start_x + clothes_resized.shape[1], c] * (1.0 - clothes_resized[:, :, 3] / 255.0)
 
-        # Сохранение результата
-        cv2.imwrite('annotated_image.jpg', annotated_image)
+                # Сохранение результата
+                cv2.imwrite('output.jpg', image)
 
-        # Показ результата
-        cv2.imshow('Annotated Image', annotated_image)
-        cv2.waitKey(0)
-        cv2.destroyAllWindows()
+                # Показ результата
+                cv2.imshow('Output', image)
+                cv2.waitKey(0)
+                cv2.destroyAllWindows()
+            else:
+                print("Ошибка: Некорректные размеры одежды.")
     else:
         print("Поза не обнаружена. Убедитесь, что на изображении видно тело человека.")
\ No newline at end of file
